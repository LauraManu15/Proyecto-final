-- CREACIÓN DE LA BASE DE DATOS
CREATE DATABASE IF NOT EXISTS produccion_db;
USE produccion_db;

-- TABLA: Categorías de productos
CREATE TABLE categorias (
    id_categoria INT AUTO_INCREMENT PRIMARY KEY,
    nombre_categoria VARCHAR(100) NOT NULL
);

-- TABLA: Productos terminados
CREATE TABLE productos (
    id_producto INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    descripcion TEXT,
    id_categoria INT NOT NULL,
    precio_unitario DECIMAL(10,2),
    FOREIGN KEY (id_categoria) REFERENCES categorias(id_categoria)
);

-- TABLA: Empleados de planta
CREATE TABLE empleados (
    id_empleado INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    cargo VARCHAR(50) NOT NULL,
    fecha_ingreso DATE NOT NULL
);

-- TABLA: Turnos laborales
CREATE TABLE turnos (
    id_turno INT AUTO_INCREMENT PRIMARY KEY,
    descripcion VARCHAR(50) NOT NULL,
    hora_inicio TIME NOT NULL,
    hora_fin TIME NOT NULL
);

-- TABLA: Insumos (materias primas)
CREATE TABLE insumos (
    id_insumo INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    unidad_medida VARCHAR(20) NOT NULL
);

-- TABLA: Proveedores
CREATE TABLE proveedores (
    id_proveedor INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    contacto VARCHAR(100)
);

-- TABLA: Compras de insumos
CREATE TABLE compras_insumos (
    id_compra INT AUTO_INCREMENT PRIMARY KEY,
    id_proveedor INT NOT NULL,
    id_insumo INT NOT NULL,
    cantidad INT NOT NULL CHECK (cantidad > 0),
    fecha DATE NOT NULL,
    FOREIGN KEY (id_proveedor) REFERENCES proveedores(id_proveedor),
    FOREIGN KEY (id_insumo) REFERENCES insumos(id_insumo)
);

-- TABLA: Órdenes de producción
CREATE TABLE ordenes_produccion (
    id_orden INT AUTO_INCREMENT PRIMARY KEY,
    id_producto INT NOT NULL,
    cantidad INT NOT NULL CHECK (cantidad > 0),
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE,
    id_empleado INT NOT NULL,
    id_turno INT NOT NULL,
    FOREIGN KEY (id_producto) REFERENCES productos(id_producto),
    FOREIGN KEY (id_empleado) REFERENCES empleados(id_empleado),
    FOREIGN KEY (id_turno) REFERENCES turnos(id_turno)
);

-- TABLA: Detalle de insumos utilizados en órdenes
CREATE TABLE detalle_orden (
    id_detalle INT AUTO_INCREMENT PRIMARY KEY,
    id_orden INT NOT NULL,
    id_insumo INT NOT NULL,
    cantidad_usada INT NOT NULL CHECK (cantidad_usada > 0),
    FOREIGN KEY (id_orden) REFERENCES ordenes_produccion(id_orden),
    FOREIGN KEY (id_insumo) REFERENCES insumos(id_insumo)
);

-- TABLA: Registro de movimientos de stock de insumos
CREATE TABLE stock_insumos (
    id_stock INT AUTO_INCREMENT PRIMARY KEY,
    id_insumo INT NOT NULL,
    fecha DATE NOT NULL DEFAULT CURDATE(),
    cantidad INT NOT NULL CHECK (cantidad > 0),
    tipo_movimiento ENUM('entrada', 'salida') NOT NULL,
    FOREIGN KEY (id_insumo) REFERENCES insumos(id_insumo)
);

-- TABLA: Registro de movimientos de stock de productos
CREATE TABLE stock_productos (
    id_stock INT AUTO_INCREMENT PRIMARY KEY,
    id_producto INT NOT NULL,
    fecha DATE NOT NULL DEFAULT CURDATE(),
    cantidad INT NOT NULL CHECK (cantidad > 0),
    tipo_movimiento ENUM('entrada', 'salida') NOT NULL,
    FOREIGN KEY (id_producto) REFERENCES productos(id_producto)
);

-- VISTAS

-- Producción mensual por producto
CREATE VIEW vista_produccion_mensual AS
SELECT 
    DATE_FORMAT(fecha_inicio, '%Y-%m') AS mes,
    p.nombre AS producto,
    SUM(o.cantidad) AS total_producido
FROM ordenes_produccion o
JOIN productos p ON o.id_producto = p.id_producto
GROUP BY mes, producto;

-- Consumo total de insumos
CREATE VIEW vista_insumos_consumidos AS
SELECT 
    i.nombre AS insumo,
    SUM(d.cantidad_usada) AS total_usado
FROM detalle_orden d
JOIN insumos i ON d.id_insumo = i.id_insumo
GROUP BY i.nombre;

-- Stock actual de insumos
CREATE VIEW vista_stock_insumos_actual AS
SELECT 
    i.id_insumo,
    i.nombre,
    obtener_stock_insumo(i.id_insumo) AS stock_actual
FROM insumos i;

-- Stock actual de productos
CREATE VIEW vista_stock_productos_actual AS
SELECT 
    p.id_producto,
    p.nombre,
    obtener_stock_producto(p.id_producto) AS stock_actual
FROM productos p;

-- Producción por empleado
CREATE VIEW vista_produccion_empleado AS
SELECT 
    e.nombre AS empleado,
    p.nombre AS producto,
    SUM(o.cantidad) AS total
FROM ordenes_produccion o
JOIN empleados e ON o.id_empleado = e.id_empleado
JOIN productos p ON o.id_producto = p.id_producto
GROUP BY empleado, producto;

-- FUNCIONES
DELIMITER //
CREATE FUNCTION obtener_stock_insumo(id INT) RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE stock_total INT;
    SELECT SUM(CASE WHEN tipo_movimiento = 'entrada' THEN cantidad ELSE -cantidad END)
    INTO stock_total
    FROM stock_insumos
    WHERE id_insumo = id;
    RETURN IFNULL(stock_total, 0);
END //

CREATE FUNCTION obtener_stock_producto(id INT) RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE stock_total INT;
    SELECT SUM(CASE WHEN tipo_movimiento = 'entrada' THEN cantidad ELSE -cantidad END)
    INTO stock_total
    FROM stock_productos
    WHERE id_producto = id;
    RETURN IFNULL(stock_total, 0);
END //
DELIMITER ;

-- PROCEDIMIENTOS
DELIMITER //
CREATE PROCEDURE registrar_orden(
    IN pid_producto INT,
    IN pcantidad INT,
    IN pfecha_inicio DATE,
    IN pfecha_fin DATE,
    IN pid_empleado INT,
    IN pid_turno INT
)
BEGIN
    INSERT INTO ordenes_produccion(id_producto, cantidad, fecha_inicio, fecha_fin, id_empleado, id_turno)
    VALUES (pid_producto, pcantidad, pfecha_inicio, pfecha_fin, pid_empleado, pid_turno);
END //

CREATE PROCEDURE actualizar_stock_insumo(
    IN pid_insumo INT,
    IN pcantidad INT,
    IN ptipo ENUM('entrada','salida')
)
BEGIN
    INSERT INTO stock_insumos(id_insumo, fecha, cantidad, tipo_movimiento)
    VALUES (pid_insumo, CURDATE(), pcantidad, ptipo);
END //
DELIMITER ;

-- TRIGGERS
DELIMITER //
CREATE TRIGGER tr_orden_insertar_stock
AFTER INSERT ON ordenes_produccion
FOR EACH ROW
BEGIN
    INSERT INTO stock_productos(id_producto, fecha, cantidad, tipo_movimiento)
    VALUES (NEW.id_producto, NEW.fecha_fin, NEW.cantidad, 'entrada');
END //

CREATE TRIGGER tr_consumo_insumos
AFTER INSERT ON detalle_orden
FOR EACH ROW
BEGIN
    INSERT INTO stock_insumos(id_insumo, fecha, cantidad, tipo_movimiento)
    VALUES (NEW.id_insumo, CURDATE(), NEW.cantidad_usada, 'salida');
END //
DELIMITER ;
